/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package zgc.test;

import org.apache.commons.lang3.time.StopWatch;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;

public final class App {

	private static final class Settings {
		static final short LRU_CACHE_MILLIONS_OF_ITEMS = 20;
		static final short GC_ITERATIONS = 20;
	}

	public static final String truncate(final String double_) {
		// 5.123
		if (double_.length() > 5) {
			return double_.substring(0, 5);
		} else {
			return double_;
		}
	}

	public static final String heap(final int run) {
		return "Heap" + (run == 0 ? "โฐ" : run == 1 ? "ยน" : "") + ": " +
			truncate(""+(((double)Runtime.getRuntime().totalMemory())/(1000*1000*1000)))
			+ " GB";
	}

	public static final void println(final Object o) {
		System.out.println(o == null ? "\n" : o);
	}

	public static final void main(final String[] args) {

		GCinfo.print();
		println("Original " + heap(-1));
		println("Allocating the LRU cache...");
		final var sw = new StopWatch();
		sw.start();
		final var c = new lru_cache<Integer>(1000*1000*Settings.LRU_CACHE_MILLIONS_OF_ITEMS);
		for (var i = 0; i < 1000*1000*Settings.LRU_CACHE_MILLIONS_OF_ITEMS; ++i) {
			c.refer(i);
		}
		sw.stop();
		println("Allocated the LRU cache in " + sw.getTime() + " ms");

		for (var i = 0; i < Settings.GC_ITERATIONS; ++i) {
			println(null);
			println(heap(0));
			final var g = new GCthread();
			g.start();
			final var stopWatch = new StopWatch();
			stopWatch.start();
			System.gc();
			stopWatch.stop();
			println(heap(1));
			println("Time to perform a full GC: " + stopWatch.getTime() + " ms");
			println("Sleeping for " + stopWatch.getTime()/2 + " ms");
			try {
				Thread.sleep(stopWatch.getTime()/2);
			} catch (final InterruptedException e) {
				System.out.println("Fatal Error: " + e);
				System.exit(1);
			}
			stopWatch.reset();
		}

		GCthread.printLatencyStats();
	}
}
